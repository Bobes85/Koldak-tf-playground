
name: 35 terraform cloud
on:
  workflow_dispatch:
    inputs:
      apply:
        description: 'Apply?'
        default: false
        required: false
        type: boolean

defaults:
  run:
    working-directory: 35-tf-cloud-gha

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write

    steps:
      - uses: actions/checkout@v4
      - name: Print the date and working dir
        run: date; pwd
      - uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        continue-on-error: true
        if: ${{ inputs.apply == true || inputs.applyl == 'true' }}
      
      - name: Report
        run: |
          echo "# terraform plan" > /tmp/plan.md
          echo '```' >> /tmp/plan.md
          tee -a /tmp/plan.md <<< "$PLAN"
          echo '```' >> /tmp/plan.md

          echo "---"

          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/mkol5222/tf-playground/issues \
            -f title='Terraform finished' \
            -F body=@/tmp/plan.md

        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          GH_TOKEN: ${{ github.token }}
        shell: bash


      # - uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       // 1. Retrieve existing bot comments for the PR
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       })
      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
      #       })

      #       // 2. Prepare format of the comment
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       <details><summary>Validation Output</summary>

      #       \`\`\`\n
      #       ${{ steps.validate.outputs.stdout }}
      #       \`\`\`

      #       </details>

      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

      #       // 3. If we have a comment, update it, otherwise create a new one
      #       if (botComment) {
      #         github.rest.issues.updateComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #           body: output
      #         })
      #       } else {
      #         github.rest.issues.createComment({
      #           issue_number: context.issue.number,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: output
      #         })
      #       }       
